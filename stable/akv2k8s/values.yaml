# Default values
name: akv2k8s

global:
  # -- Env vars to be used with all enabled pods, eg. for akv credentials
  env: {}

rbac:
  # -- Specifies whether RBAC resources should be created
  create: true
  podSecurityPolicies: {}

addAzurePodIdentityException: false # see https://github.com/Azure/aad-pod-identity/blob/master/docs/readmes/README.app-exception.md
cloudConfig: /etc/kubernetes/azure.json

controller:
  name: controller
  image:
    # -- Image repository that contains the controller image
    repository: spvest/azure-keyvault-controller
    tag: 1.2.0-beta.40
    pullPolicy: IfNotPresent

  logLevel: info # info=2, debug=4, trace=6
  logFormat: text # text or json

  keyVaultAuth: azureCloudConfig # azureCloudConfig (aks credentials), environment (custom)

  serviceAccount:
    # -- Create service account for controller
    create: true
    # -- The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # -- Controller envs
  env: {}
  # Uncomment to use client-id / secret - see https://akv2k8s.io/security/authentication/#custom-authentication-options
  #   AZURE_TENANT_ID: <tenantId>
  #   AZURE_CLIENT_ID: <clientId>
  #   AZURE_CLIENT_SECRET: <clientSecret>
  labels: {}
  # -- Controller pod labels
  podLabels: {}

  # -- Controller resources
  resources: {}
  # -- Node selector for controller
  nodeSelector: {}
  # -- Tolerations for controller
  tolerations: []
  # -- Affinities for controller
  affinity: {}

env_injector:
  # -- If the env-injector will be installed
  enabled: true
  name: env-injector

  keyVaultAuth: cloudConfig # cloudConfig, environment,
  authService: true # set to false to provide azure key vault credentials locally (through e.g. env vars) in each pod

  image:
    # -- Image repository that contains the env-injector image
    repository: spvest/azure-keyvault-webhook
    tag: 1.2.0-beta.21
    pullPolicy: IfNotPresent

  replicaCount: 2

  envImage:
    # -- Image repository that contains the env image
    repository: spvest/azure-keyvault-env
    # -- Image tag
    tag: 1.2.0-beta.10

  logLevel: "4"
  logFormat: fmt # ftm or json

  certificate:
    useCertManager: false
    custom:
      enabled: false
      server:
        tls:
          crt:
          key:
      ca:
        crt:

  securityContext:
    allowPrivilegeEscalation: true # must be true if using aks identity
  #   runAsUser: 65534

  namespaceLabelSelector:
    label:
      name: azure-key-vault-env-injection
      value: enabled

  caBundleConfigMapName: akv2k8s-ca

  dockerImageInspection:
    # -- Timeout in seconds
    timeout: 20
    # -- Only applicable if `runningInsideAzureAks` is also `true`
    useAksCredentialsWithACS: true

  service:
    # -- Webhook service name
    name: azure-keyvault-secrets-webhook
    type: ClusterIP
    # -- External webhook and health tls port
    externalTlsPort: 443
    # -- Internal webhook and health tls port (set to larger than 1024 when running without privileges)
    internalTlsPort: 8443
    # -- External metrics and health port
    externalHttpPort: 80
    # -- Internal metrics and health port (set to larger than 1024 when running without privileges)
    internalHttpPort: 8080
    # -- External auth service mtls port
    externalAuthServiceMutualTlsPort: 9443
    # -- Internal auth service mtls port (set to larger than 1024 when running without privileges)
    internalAuthServiceMutualTlsPort: 9443

  metrics:
    # -- Enable prometheus metrics for env-injector
    enabled: false
    serviceMonitor:
      # -- Enable service-monitor for env-injector
      enabled: false
      # -- Scrape interval for service-monitor
      interval: 30s
      # -- Additional labels for service-monitor
      additionalLabels: {}

  serviceAccount:
    # -- Create service account for env-injector
    create: true
    # -- The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  env: {}
  # Uncomment to use client-id / secret - see https://akv2k8s.io/security/authentication/#custom-authentication-options
  #   AZURE_TENANT_ID: <tenantId>
  #   AZURE_CLIENT_ID: <clientId>
  #   AZURE_CLIENT_SECRET: <clientSecret>
  labels: {}
  podLabels: {}

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  #  maxUnavailable: 1

  # What will happen if the webhook fails? Ignore (continue) or Fail (prevent Pod from starting)?
  failurePolicy: Fail

  # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
  namespaceSelector:
    # Prevent env injection for pods in kube-system as recomended: https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#avoiding-operating-on-the-kube-system-namespace
    matchExpressions:
    - key: name
      operator: NotIn
      values:
      - kube-system

  resources: {}
  # -- Node selector for env injector and ca-bundle
  nodeSelector: {}
  # -- Tolerations for env injector and ca-bundle
  tolerations: []
  # -- Affinities for env injector and ca-bundle
  affinity: {}
